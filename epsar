#!/usr/bin/env perl

## Copyright (c) 2012-2021 EUMETSAT

## EPSar is a tool for wrapping and unwrapping EPS products containing NetCDF
## data records.
##
## This program is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program.  If not, see <http://www.gnu.org/licenses/>.
##
## Author leonid.butenko@eumetsat.int
##

use strict;
use Fcntl qw/SEEK_SET O_RDWR O_TRUNC O_WRONLY O_CREAT O_RDONLY SEEK_CUR/;
use POSIX qw/strftime floor ceil/;
use File::Basename;
use File::Copy;
use Time::Local;
use Getopt::Long;

our $VERSION = "1.8";

my $big_endian = pack("L", 1) eq pack("N", 1);
my $ncdf_descr_size = 1+1+4+3;
use constant SECONDS_PER_DAY => (24*60*60);
use constant EPS_EPOCH => timegm( 0, 0, 0, 1, 0, 2000-1900 );

our @RecordClassName = ( "reserved", "MPHR", "SPHR", "IPR", "GEADR", "GIADR", "VEADR", "VIADR", "MDR" );
our $mdrCount = 0;

Getopt::Long::Configure(qw{no_auto_abbrev no_ignore_case_always});

our($opt_x, $opt_c, $opt_t, $opt_v, $opt_m, $opt_o);
GetOptions ('verbose|v' => \$opt_v,
			'extract|x' => \$opt_x,
			'create|c' => \$opt_c,
			'outdir|C=s' => \$opt_o,
			'list|t' => \$opt_t,
			'mphr|m:s' => \$opt_m,
			'help|?' => sub { VERSION_MESSAGE(\*STDOUT); HELP_MESSAGE(\*STDOUT); },
			'version' => sub { VERSION_MESSAGE(\*STDOUT); } );

our $output_dir = defined $opt_o ? $opt_o : ".";

########### 1. Unwrapping #############################

if (defined $opt_x || defined $opt_t) {

	my $filename = $ARGV[0];

	my $pack = 0;

	if ($filename =~ /^(.*)\.gz/) {
		$pack = 1;

		system("gzip -d $filename");

		$filename = $1;

		die "unpacking failed\n" unless -f $filename;
	}

	say( "processing file $filename" );

	my $basename = basename($filename);
	my $dirname = dirname($filename);
	my $baseline = undef;

    if ($basename =~ /_(\d{4})$/) { # check for baseline in eps name
        $baseline = $1;
    }

	sysopen(F,"$filename", O_RDONLY) || die "$!\n";
	my $buf;
	my $mphr = undef;

	while (sysread(F,$buf,20) == 20) {
		my ($eRecClass, $eInstGroup, $eRecSubclass, $nSubclVer, $recSize,
			$usiCDSdStart, $uliCDSmsStart, $usiCDSdStop, $uliCDSmsStop) = unpack( "CCCCNnNnN", $buf );

		if ($eRecClass == 1) { #MPHR
			$mphr = &read_mphr( \*F, !defined($opt_m), $opt_m );
			sysseek(F,20, SEEK_SET)
		}
		elsif ($eRecClass == 8) { # MDR
			my $pos = systell( \*F );
			process_mdr( \*F, $mphr, $eRecSubclass, $nSubclVer, $recSize, $usiCDSdStart, $uliCDSmsStart, $usiCDSdStop, $uliCDSmsStop, $baseline );
			sysseek(F,$pos, SEEK_SET);
			$mdrCount++;
		}
		else {
			say( "Record ($eRecClass:" . $RecordClassName[$eRecClass] . ", $eInstGroup, $eRecSubclass, $nSubclVer, size: $recSize, " .
				"$usiCDSdStart, $uliCDSmsStart, $usiCDSdStop, $uliCDSmsStop) is unprocessed" );
		}
		my $seek_res = sysseek(F,$recSize-20, SEEK_CUR);
		last unless defined $seek_res;
	}

	close F;

	if ($pack) {
		system("gzip $filename");
	}
}

########### 1. Wrapping #############################

elsif (defined $opt_c) {

	my $mphr_fname = $opt_m;

	my $temp_name = "$output_dir/GRAS_TEMP.$$." . time ;

	sysopen(FOUT,"$temp_name", O_CREAT|O_WRONLY) || die "can't create $!\n";
	my ($lev, $sat, $sens_start, $sens_stop, $processing_mode, $disp_mode, $processing_start, $processing_stop, $baseline) = (undef, undef, undef, undef, undef, undef, undef, undef, undef);
	if (defined $opt_m) {
		my $buf = &read_file( $mphr_fname );

		if (length($buf) != 3307) {
			unlink $temp_name;
			die "mphr size: " . length($buf) . "! should be 3307 bytes\n";
		}

		syswrite(FOUT,$buf, 3307);

		unless ($mphr_fname =~ /GRAS_(..)_(...)_(.{14})Z_(.{14})Z_(.)_(.)_(.{14})Z/) {
			close FOUT;
			unlink $temp_name;
			die "MPHR file doesn't follow the naming convention. Should be in the format:
				GRAS_1A_M02_xxSENS_STARTxx_xxSENS_STOPxxx_N_O_xxxPROC_STARTx.mphr\n";
		}
		($lev, $sat, $sens_start, $sens_stop, $processing_mode, $disp_mode, $processing_start, $processing_stop) = ($1, $2, $3, $4, $5, $6, $7, $7);
	}
	else {
		empty_mphr( \*FOUT );
	}

	# split files by extension

	my %splitted_by_extension = ();
	my $re_eps = 'GRAS_(..)_(...)_(.{14})Z_(.{14})Z_(.)_(.)_(.{14})Z_(...)_(.)(.)([_\d]{0,5})(\..+)';

	my $prev_ipr_type = -1;
	my $ipr_type = -1;
	my $prev_sens_stop = undef;
	my $offset = 0;
	my $degr_inst_mdr = 0;
	my $degr_proc_mdr = 0;

	my @mdrs = ();
	my @iprs = ();

	foreach my $chunk(@ARGV) {
		unless ($chunk =~ /$re_eps/i) {
			die "$chunk is wrong name for MDR netCDF\n";
		};
		my ($llev, $lsat, $lsens_start, $lsens_stop, $lproc_mode, $ldisp_mode, $lprocess_start, $lgps, $linst_degr, $lproc_degr, $lbaseline, $ext) = ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12);

        if ($lbaseline ne '') {
            $lbaseline =~ s/_//; # remove underscore
        }
        else {
            $lbaseline = undef;
        }

		my @mdr_version;

		if (defined $ext && lc($ext) eq '.nc') {
			@mdr_version = (30, 1);
			$ipr_type = 1;
		}
		elsif (defined $ext && lc($ext) eq '.bufr') {
			@mdr_version = (31, 1);
			$ipr_type = 2;
		}
		else {
			unlink $temp_name;
			die "Unknown extension of the input file: '$ext': $chunk\n";
		}

		if (defined $baseline && !defined $lbaseline) {
		    unlink $temp_name;
		    die "Baseline inconsitency detected for $chunk : baseline expected: $baseline\n";
		}
		if (!defined $baseline && defined $lbaseline) { # for the very first time
		    $baseline = $lbaseline;
		}
		# initialize default values from the first ncdf product (in case we don't have MPHR file)
		$lev = $llev unless (defined $lev);
		$sat = $lsat unless (defined $sat);
		$sens_start = $lsens_start unless (defined $sens_start);
		$sens_stop = $lsens_stop unless (defined $sens_stop);
		$processing_mode = $lproc_mode unless (defined $processing_mode);
		$disp_mode = $ldisp_mode unless (defined $disp_mode);
		$processing_start = $lprocess_start unless (defined $processing_start);
		$processing_stop = $lprocess_start unless (defined $processing_stop);
		$degr_inst_mdr += ($linst_degr eq 'N' ? 0 : 1);
		$degr_proc_mdr += ($lproc_degr eq 'N' ? 0 : 1);

		## updating minimum and maximum time values
		$sens_start = $lsens_start if ($sens_start gt $lsens_start);
		$sens_stop = $lsens_stop if ($sens_stop lt $lsens_stop);
		$processing_start = $lprocess_start if ($processing_start gt $lprocess_start);
		$processing_stop = $lprocess_start if ($processing_stop lt $lprocess_start);

		if ($llev ne $lev) {
		    unlink $temp_name;
		    die "Error! $chunk has proc_level '$llev'. Expected '$lev'\n";
		}
		if ($lproc_mode ne $processing_mode) {
		    unlink $temp_name;
		    die "Error! $chunk has proc_mode '$lproc_mode'. Expected '$processing_mode'\n";
		}
		if ($ldisp_mode ne $disp_mode) {
		    unlink $temp_name;
		    die "Error! $chunk has disp_mode '$ldisp_mode'. Expected '$disp_mode'\n";
		}
		if ($lsat ne $sat) {
		    unlink $temp_name;
		    die "Error! $chunk has sat '$lsat'. Expected '$sat'\n";
		}


		my $fsize = -s $chunk;

		my ($mdr_start_days, $mdr_start_msecs) = str_to_scds( $lsens_start );
		my ($mdr_stop_days, $mdr_stop_msecs) = str_to_scds( $lsens_stop );

		## producing an MDR
		my $buf_header = pack( "CCCCNnNnNCCNa3", 8, 6, $mdr_version[0], $mdr_version[1], $fsize+$ncdf_descr_size+20,
				$mdr_start_days, $mdr_start_msecs, $mdr_stop_days, $mdr_stop_msecs,
				($linst_degr eq 'N' ? 0 : 1), ($lproc_degr eq 'N' ? 0 : 1), $fsize, $lgps );

		if ($ipr_type != $prev_ipr_type) {
			push @iprs, {
				mdr_header => $buf_header,
				offset => $offset,
			};
			$prev_ipr_type = $ipr_type;
		}

		push @mdrs, {
			fn => $chunk,
			header => $buf_header,
			fsize => $fsize
		};

		$offset += $fsize + $ncdf_descr_size + 20; # record_header and record descriptor
	}

	# write Records

	foreach my $ipr(@iprs) {
		&produce_ipr( \*FOUT, $ipr->{mdr_header}, $ipr->{offset} + scalar(@iprs)*27 + 3307, $sens_start, $sens_stop );
	}

	foreach my $mdr(@mdrs) {
		my $buf_mdr = &read_file( $mdr->{fn} );
		syswrite(FOUT,$mdr->{header}, 20 + $ncdf_descr_size);
		syswrite(FOUT,$buf_mdr, $mdr->{fsize} );
	}

	close FOUT;

	my $new_eps_name = "GRAS_xxx_$lev\_$sat\_$sens_start" . "Z_$sens_stop" . "Z_$processing_mode\_$disp_mode\_$processing_start" . "Z";

	if (defined $baseline) {
	    $new_eps_name .= "_$baseline"
	}

	rename $temp_name, $output_dir . '/' . $new_eps_name;

	update_mphr( scalar(@mdrs), $sat, $sens_start, $sens_stop, $lev, $processing_mode, $disp_mode, $processing_start, $processing_stop, $new_eps_name, scalar(@iprs), $degr_inst_mdr, $degr_proc_mdr );

	print "$output_dir/$new_eps_name file created\n";
}
else {
	VERSION_MESSAGE(\*STDOUT);
	HELP_MESSAGE(\*STDOUT);
}

exit (0);

sub systell { sysseek($_[0], 0, SEEK_CUR) }

################################################################
### updates mphr fields of newly constructed product.
##
sub update_mphr
{
	my ($mdrs_count, $sat, $sens_start, $sens_stop, $proc_level, $proc_mode, $disp_mode, $processing_start, $processing_stop, $new_eps_name, $ipr_count, $degr_inst_mdr, $degr_proc_mdr ) = @_;

	my $fsize = -s "$output_dir/$new_eps_name";

	sysopen(F,"$output_dir/$new_eps_name", O_RDWR) || die "can't open '$new_eps_name' $!\n";

	my ($mphr_start_days, $mphr_start_msecs) = str_to_scds( $sens_start );
	my ($mphr_stop_days, $mphr_stop_msecs) = str_to_scds( $sens_stop );
	my $buf_header = pack("nNnN", $mphr_start_days, $mphr_start_msecs, $mphr_stop_days, $mphr_stop_msecs );
	sysseek(F,0x08, SEEK_SET);
	syswrite(F, $buf_header, 12 ); # MPHR record header start-end update

	sysseek(F,0x34, SEEK_SET); ## PRODUCT_NAME
	syswrite(F,$new_eps_name,0x43);

	sysseek(F,0x295, SEEK_SET); ## PROCESSING LEVEL
	syswrite(F,$proc_level,0x02);

	sysseek(F,0x2b8, SEEK_SET); ## Sat
	syswrite(F,$sat,0x03);

	sysseek(F,0x2dc, SEEK_SET); ## SENSING_START
	syswrite(F,$sens_start,0xE);

	sysseek(F,0x30c, SEEK_SET); ## SENSING_STOP
	syswrite(F,$sens_stop,0xE);

	sysseek(F,0x459, SEEK_SET); ## PROCESSING_START
	syswrite(F,$processing_start,0xE);

	sysseek(F,0x489, SEEK_SET); ## PROCESSING_STOP
	syswrite(F,$processing_stop,0xE);

	sysseek(F,0x4b9, SEEK_SET); ## PROCESSING MODE
	syswrite(F,$proc_mode,0x01);

	sysseek(F,0x4db, SEEK_SET); ## DISPOSITION MODE
	syswrite(F,$disp_mode,0x01);

	sysseek(F,0x5cd, SEEK_SET); ## ACTUAL_PRODUCT_SIZE
	my $tmp_str = sprintf( "%11d", $fsize);
	syswrite(F, $tmp_str, 11);

	sysseek(F,0x0a73, SEEK_SET); ## TOTAL_RECORDS
	$tmp_str = sprintf( "%6d", $mdrs_count+$ipr_count+1);
	syswrite(F, $tmp_str, 6);

	sysseek(F,0x0a9a, SEEK_SET); ## TOTAL_MPHR
	$tmp_str = sprintf( "%6d", 1);
	syswrite(F, $tmp_str, 6);

	sysseek(F,0x0bab, SEEK_SET); ## TOTAL_MDR
	$tmp_str = sprintf( "%6d", $mdrs_count);
	syswrite(F, $tmp_str, 6);

	$tmp_str = sprintf( "%6d", $ipr_count);
	sysseek(F,0x0ae8, SEEK_SET); ## TOTAL_IPR
	syswrite(F, $tmp_str, 6);

	sysseek(F,0x0ac1, SEEK_SET); ## TOTAL_SPHR
	$tmp_str = sprintf( "%6d", 0);
	syswrite(F, $tmp_str, 6);

	sysseek(F,0x0b0f, SEEK_SET); ## TOTAL_GEADR
	syswrite(F, $tmp_str, 6);

	sysseek(F,0x0b36, SEEK_SET); ## TOTAL_GIADR
	syswrite(F, $tmp_str, 6);

	sysseek(F,0x0b5d, SEEK_SET); ## TOTAL_VEADR
	syswrite(F, $tmp_str, 6);

	$tmp_str = sprintf( "%6d", (defined($degr_inst_mdr)?$degr_inst_mdr:0) );
	sysseek(F,0x0bd2, SEEK_SET); ## COUNT_DEGRADED_INST_MDR
	syswrite(F, $tmp_str, 6);

	$tmp_str = sprintf( "%6d", (defined($degr_proc_mdr)?$degr_proc_mdr:0) );
	sysseek(F,0x0bf9, SEEK_SET); ## COUNT_DEGRADED_PROC_MDR
	syswrite(F, $tmp_str, 6);

	close F;
}

sub produce_ipr
{
	my ($fh, $rec_header, $offset, $start_time, $stop_time) = @_;
	my ($rec_class, $inst_grp, $subclass, $subclassV, $rec_size, $day_start, $usec_start, $day_end, $usec_end) = unpack('CCCCNnNnN', $rec_header);
	my $ipr_buf = pack( "CCCCNnNnNCCCN", 3, 0, $rec_class, $subclassV, 27,
						(defined $start_time ? str_to_scds($start_time) : ($day_start, $usec_start)),
						(defined $stop_time ? str_to_scds($stop_time) : ($day_end, $usec_end)),
						$rec_class, $inst_grp, $subclass, $offset);

	syswrite( $fh, $ipr_buf, length($ipr_buf) );
}

sub read_file
{
	my ($fname) = @_;

	sysopen(FIN,"$fname", O_RDONLY) || die "file not exist $!\n";

	my $fsize = -s $fname;

	say( "Reading $fsize bytes from $fname" );

	my $buf;
	sysseek(FIN,0x0, SEEK_SET);
	sysread(FIN,$buf,$fsize);

	close FIN;

	return $buf;
}

sub read_mphr()
{
	my ($fh, $dont_store, $mphr_fname) = @_;
	my $mphr = {
		PRODUCT_NAME => "",
		INSTRUMENT_ID => "",
		PRODUCT_TYPE => "",
		PROCESSING_LEVEL => "",
		SPACECRAFT_ID => "",
		SENSING_START => "",
		SENSING_STOP => "",
		PROCESSING_CENTRE => "",
		PROCESSING_MODE => "",
		ORBIT_START => "",
		ORBIT_END => "",
		TOTAL_MDR => ""
	};
	my $pattern = '^(\w{4}_\w{3}_.._)M02(_\d{14}Z_\d{14}Z_._._\d{14}.*)$';

	sysseek($fh,0x34, SEEK_SET);
	sysread($fh,$mphr->{PRODUCT_NAME},0x43);

	sysseek($fh,0x228, SEEK_SET);
	sysread($fh,$mphr->{INSTRUMENT_ID},0x4);

	sysseek($fh,0x271, SEEK_SET);
	sysread($fh,$mphr->{PRODUCT_TYPE},0x3);

	sysseek($fh,0x295, SEEK_SET);
	sysread($fh,$mphr->{PROCESSING_LEVEL},0x2);

	sysseek($fh,0x2b8, SEEK_SET);
	sysread($fh,$mphr->{SPACECRAFT_ID},0x03);

	sysseek($fh,0x2dc, SEEK_SET);
	sysread($fh,$mphr->{SENSING_START},0xE);

	sysseek($fh,0x30c, SEEK_SET);
	sysread($fh,$mphr->{SENSING_STOP},0xE);

	sysseek($fh,0x39c, SEEK_SET);
	sysread($fh,$mphr->{PROCESSING_CENTRE},0x4);

	sysseek($fh,0x4b9, SEEK_SET);
	sysread($fh,$mphr->{PROCESSING_MODE},0x1);

	sysseek($fh,0x4db, SEEK_SET);
	sysread($fh,$mphr->{DISPOSITION_MODE},0x1);

	sysseek($fh,0x459, SEEK_SET);
	sysread($fh,$mphr->{PROCESSING_TIME_START},0xE);

	sysseek($fh,0x489, SEEK_SET);
	sysread($fh,$mphr->{PROCESSING_TIME_STOP},0xE);

	sysseek($fh,0x581, SEEK_SET);
	sysread($fh,$mphr->{ORBIT_START},0x5);

	sysseek($fh,0x5a7, SEEK_SET);
	sysread($fh,$mphr->{ORBIT_END},0x5);

	sysseek($fh,0x0bab, SEEK_SET);
	sysread($fh,$mphr->{TOTAL_MDR},0x6);

	## storing complete MPHR to a separate file	 (for later usage by wrapper)
	if (!defined $dont_store || $dont_store == 0) {
		my $buf;
		sysseek($fh,0x0, SEEK_SET);
		sysread($fh,$buf,3307);

        unless (defined ($mphr_fname) && $mphr_fname ne "") {
		    $mphr_fname = "GRAS_$mphr->{PROCESSING_LEVEL}_$mphr->{SPACECRAFT_ID}_$mphr->{SENSING_START}Z_$mphr->{SENSING_STOP}Z_$mphr->{PROCESSING_MODE}_$mphr->{DISPOSITION_MODE}_$mphr->{PROCESSING_TIME_START}Z.mphr";
	    }

		if (sysopen(F1,"$output_dir/$mphr_fname", O_CREAT|O_WRONLY)) {
			syswrite(F1,$buf, 3307);
			close F1;
			say( "MPHR has been stored into '$output_dir/$mphr_fname'" );
		}
		else {
			die "Error, could not open '$output_dir/$mphr_fname' file\n";
		}
	}

	return $mphr;
}

sub process_mdr
{
	my ($fh, $mphr, $eRecSubclass, $nSubclVer, $recSize, $usiCDSdStart, $uliCDSmsStart, $usiCDSdStop, $uliCDSmsStop, $baseline) = @_;

    if ($eRecSubclass == 1) { # skip Dummy MDRs
        return;
    }

	my $buf;
	if (sysread($fh,$buf,$ncdf_descr_size) != $ncdf_descr_size) {
		die "Error, could not read from filehandle! Aborting...\n";
	}

	my ($degradedInstMdr, $degradedProcMdr, $mdrRealSize, $GPSSat) = unpack("CCNa3", $buf);

	#print "MDR: gpsSat: $GPSSat, eRecSubclass: $eRecSubclass, recSize: $recSize, RealSize: $mdrRealSize, degInstMdr: $degradedInstMdr, degProcMdr: $degradedProcMdr\n";

	my $readSize = sysread($fh, $buf, $mdrRealSize);
	if ($readSize != $mdrRealSize) {
		die "Error, could not read $mdrRealSize from file. Read $readSize instead... aborting unpacking mdr\n";
	}
	my $sens_start = scds_to_str( $usiCDSdStart, $uliCDSmsStart );
	my $sens_stop = scds_to_str( $usiCDSdStop, $uliCDSmsStop );
	my $degInst = $degradedInstMdr ? 'D' : 'N';
	my $degProc = $degradedProcMdr ? 'D' : 'N';

	## detect extension
	my $extension = ".unknown";
	if ($eRecSubclass == 30) {  ## NetCDF
	    $extension = ".nc";
	}
	elsif ($eRecSubclass == 31) { ## BUFR
	    $extension = ".bufr";
	}

	if (defined $baseline) {
	    $extension = "_$baseline" . $extension;
	}

	my $product_fname = "GRAS_$mphr->{PROCESSING_LEVEL}_$mphr->{SPACECRAFT_ID}_$sens_start"."Z_$sens_stop"."Z_$mphr->{PROCESSING_MODE}_$mphr->{DISPOSITION_MODE}_$mphr->{PROCESSING_TIME_START}Z_$GPSSat\_$degInst$degProc$extension";

	if (defined $opt_x) {
		if (sysopen(F1,"$output_dir/$product_fname", O_CREAT|O_WRONLY)) {
			syswrite(F1,$buf, $mdrRealSize);
			close F1;
			say( "MDR $mdrCount has been stored into '$output_dir/$product_fname'" );
		}
		else {
			die "Error, could not open '$output_dir/$product_fname' file\n";
		}
	}
	else { # $opt_t option
		print "MDR $mdrCount: $product_fname\n";
	}
}

sub scds_to_str
{
	my ($days, $msecs) = @_;

	my $t = int($days * SECONDS_PER_DAY + $msecs*1e-3 ) + EPS_EPOCH;
	my @tm = gmtime( $t );

	return strftime( "%Y%m%d%H%M%S", @tm );
}

sub str_to_scds
{
	my ($str) = @_;

	my $year = substr $str, 0, 4;
	my $mon = substr $str, 4, 2;
	my $mday = substr $str, 6, 2;
	my $hour = substr $str, 8, 2;
	my $min = substr $str, 10, 2;
	my $sec = substr $str, 12, 2;

	my $t = timegm( $sec, $min, $hour, $mday, $mon-1, $year-1900 );

	my $days = int (($t - EPS_EPOCH ) / SECONDS_PER_DAY);
	my $msecs = int ( (($t - EPS_EPOCH) % SECONDS_PER_DAY)*1.e3 );
	return ($days, $msecs);
}

sub get_now_scds
{
	my $t = timegm( gmtime() );

	my $days = int (($t - EPS_EPOCH ) / SECONDS_PER_DAY);
	my $msecs = int ( (($t - EPS_EPOCH) % SECONDS_PER_DAY)*1.e3 );
	return ($days, $msecs);
}

sub test_cds_strs
{
	my ($usiCDSdStart, $uliCDSmsStart, $usiCDSdStop, $uliCDSmsStop) = @_;

	my $sens_start = scds_to_str( $usiCDSdStart, $uliCDSmsStart );
	my $sens_stop = scds_to_str( $usiCDSdStop, $uliCDSmsStop );

	print "$sens_start - $sens_stop\n";

	my ($days, $msecs) = str_to_scds( $sens_start );
	print "start: $days, $msecs  vs $usiCDSdStart, $uliCDSmsStart\n";

	($days, $msecs) = str_to_scds( $sens_stop );
	print "stop: $days, $msecs  vs $usiCDSdStop, $uliCDSmsStop\n";
}

sub test_str_scds
{
    my ($str_time) = @_;

    my ($days, $msecs) = str_to_scds( $str_time );
	my $str_time_new = scds_to_str( $days, $msecs );

    my ($days_new, $msecs_new) = str_to_scds( $str_time_new );

	print "test_str_scds: numbers $days, $msecs vs $days_new, $msecs_new\n";
	print "test_str_scds: strs $str_time vs $str_time_new\n";
    return $str_time_new;
}

sub empty_mphr
{
	my $fh = shift;

	my @fields = (
		'PRODUCT_NAME                  = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx',
		'PARENT_PRODUCT_NAME_1         = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx',
		'PARENT_PRODUCT_NAME_2         = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx',
		'PARENT_PRODUCT_NAME_3         = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx',
		'PARENT_PRODUCT_NAME_4         = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx',
		'INSTRUMENT_ID                 = GRAS',
		'INSTRUMENT_MODEL              =   1',
		'PRODUCT_TYPE                  = xxx',
		'PROCESSING_LEVEL              = xx',
		'SPACECRAFT_ID                 = xxx',
		'SENSING_START                 = xxxxxxxxxxxxxxZ',
		'SENSING_END                   = xxxxxxxxxxxxxxZ',
		'SENSING_START_THEORETICAL     = xxxxxxxxxxxxxxZ',
		'SENSING_END_THEORETICAL       = xxxxxxxxxxxxxxZ',
		'PROCESSING_CENTRE             = xxxx',
		'PROCESSOR_MAJOR_VERSION       =     1',
		'PROCESSOR_MINOR_VERSION       =     0',
		'FORMAT_MAJOR_VERSION          =    10',
		'FORMAT_MINOR_VERSION          =     0',
		'PROCESSING_TIME_START         = xxxxxxxxxxxxxxZ',
		'PROCESSING_TIME_END           = xxxxxxxxxxxxxxZ',
		'PROCESSING_MODE               = N',
		'DISPOSITION_MODE              = O',
		'RECEIVING_GROUND_STATION      = SVL',
		'RECEIVE_TIME_START            = xxxxxxxxxxxxxxZ',
		'RECEIVE_TIME_END              = xxxxxxxxxxxxxxZ',
		'ORBIT_START                   = xxxxx',
		'ORBIT_END                     = xxxxx',
		'ACTUAL_PRODUCT_SIZE           =        3307',
		'STATE_VECTOR_TIME             = xxxxxxxxxxxxxxxxxZ',
		'SEMI_MAJOR_AXIS               =           0',
		'ECCENTRICITY                  =           0',
		'INCLINATION                   =           0',
		'PERIGEE_ARGUMENT              =           0',
		'RIGHT_ASCENSION               =           0',
		'MEAN_ANOMALY                  =           0',
		'X_POSITION                    =           0',
		'Y_POSITION                    =           0',
		'Z_POSITION                    =           0',
		'X_VELOCITY                    =           0',
		'Y_VELOCITY                    =           0',
		'Z_VELOCITY                    =           0',
		'EARTH_SUN_DISTANCE_RATIO      =           0',
		'LOCATION_TOLERANCE_RADIAL     =           0',
		'LOCATION_TOLERANCE_CROSSTRACK =           0',
		'LOCATION_TOLERANCE_ALONGTRACK =           0',
		'YAW_ERROR                     =           0',
		'ROLL_ERROR                    =           0',
		'PITCH_ERROR                   =           0',
		'SUBSAT_LATITUDE_START         =           0',
		'SUBSAT_LONGITUDE_START        =           0',
		'SUBSAT_LATITUDE_END           =           0',
		'SUBSAT_LONGITUDE_END          =           0',
		'LEAP_SECOND                   =  0',
		'LEAP_SECOND_UTC               = xxxxxxxxxxxxxxZ',
		'TOTAL_RECORDS                 =      0',
		'TOTAL_MPHR                    =      1',
		'TOTAL_SPHR                    =      0',
		'TOTAL_IPR                     =      0',
		'TOTAL_GEADR                   =      0',
		'TOTAL_GIADR                   =      0',
		'TOTAL_VEADR                   =      0',
		'TOTAL_VIADR                   =      0',
		'TOTAL_MDR                     =      0',
		'COUNT_DEGRADED_INST_MDR       =      0',
		'COUNT_DEGRADED_PROC_MDR       =      0',
		'COUNT_DEGRADED_INST_MDR_BLOCKS=      0',
		'COUNT_DEGRADED_PROC_MDR_BLOCKS=      0',
		'DURATION_OF_PRODUCT           =        0',
		'MILLISECONDS_OF_DATA_PRESENT  =        0',
		'MILLISECONDS_OF_DATA_MISSING  =        0',
		'SUBSETTED_PRODUCT             = F');

	my ($days, $msecs) = get_now_scds();

	my $buf_header = pack( "CCCCNnNnN", 1, 0, 0, 2, 3307, $days, $msecs, $days, $msecs );
	syswrite($fh,$buf_header, 20);
	foreach (@fields) {
		my $field = $_."\n";
		syswrite( $fh, $field, length($field) );
	}
}

sub say
{
	my $msg = shift;

	if ($opt_v)	{
		print ($msg . "\n");
	};
}

sub VERSION_MESSAGE
{
	my $fh = shift;

	print $fh "EPSar v$VERSION                                  EUMETSAT (c) 2012-2021\n\n";
}

sub HELP_MESSAGE
{
	my $fh = shift;
	print $fh "epsar -x -c -v -t [-m <MPHR>] [-C <output dir>] <EPS_Product> | [<file1>] ... [<fileN>]\n\n".
		  "-x, --extract   Unwrap EPS product. e.g:\n" .
		  "                   epsar -x <EPS_PRODUCT>\n" .
		  "-c, --create    Create EPS product from a set of product files (NetCDF4/BUFR) and MPHR file. e.g:\n" .
		  "                   epsar -c -m <MPHR> <netCDF4/BUFR files to wrap>\n" .
		  "-t, --list      Lists the NetCDF4/BUFR files contained in the EPS product.\n" .
		  "-C, --outgdir   Output directory (default is ./)\n" .
		  "-v, --verbose   Verbose output (default is silent)\n" .
		  "-m, --mphr      MPHR file with the product model for -c (when extracting enables MPHR to be stored in a separate file)\n".
		  "\n";
}

